I"r!<h2 id="00-들어가기-전">00. 들어가기 전</h2>
<p>저처럼 비전공자이지만 학문적 기초를 닦고자 하시는 분들, 또는 전공자이나 기초적인 컴퓨터 과학 지식(일명 CS 기초)을 더 채우고자 하는 분들을 위해 부족하게나마 도움이 되고자 글을 씁니다.</p>

<p>앞으로 CS 기초와 관련된 글들을 게시할 예정이고, 이번 포스팅은 <strong>소프트웨어 공학</strong>에 대한 정리입니다. 글들은 책을 읽고 요약·정리한 내용으로 채울 예정이고, 추후 강의나 보충 자료를 통해 내용을 수정할 수 있습니다.</p>

<p>블로그에 들려주셔서 감사하고, 이 포스팅이 여러분들께 조금이나마 도움이 되길 바랍니다.
감사합니다.</p>

<h2 id="01-소프트웨어-공학이란">01. 소프트웨어 공학이란?</h2>
<p>개발 또는 정보 관련 자격증을 준비하면서 소프트웨어와 소프트웨어 공학이라는 말을 듣게 된다. 소프트웨어가 무엇인지는 막연히 알겠는데, 소프트웨어 공학은 무엇일까? <br />
소프트웨어 공학은 소프트웨어를 어떻게 만들 것인지, 만드는 동안 소요되는 시간과 또 만들어진 결과물의 모습은 어떻게 되는지에 대해 정리한 것이라고 한다. <br />
간단히 정리하자면 <u>소프트웨어를 어떻게하면 잘 만들 수 있는지 가르쳐주는 것</u>이 <strong>소프트웨어 공학</strong>이라고 한다.</p>

<h2 id="02-소프트웨어-공학-탄생과-정의">02. 소프트웨어 공학 탄생과 정의</h2>
<p>소프트웨어 공학이라는 개념은 <a href="https://ko.wikipedia.org/wiki/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EC%9C%84%EA%B8%B0" target="_blank" class="link-no-underline">소프트웨어 위기(Software Crisis)</a> 속에서 탄생했다. 1960년대 프로그램 개발에 대한 수요가 폭발적으로 증가하면서 많은 개발 프로젝트가 진행됐지만, 당시 이를 지원해줄 공급은 턱없이 부족했고 이에 결과물은 당연히 좋지 못했다. <br />
많은 소프트웨어 개발 프로젝트가 실패하면서 이를 극복하기 위해, 처음부터 모든 것을 만들어내는 것이 아닌 공학적 패러다임을 적용해 개발을 진행하자는 의견이 제기되었고, 1968년 10월 독일의 가미쉬(Garmisch) 도시에서 개최된 NATO의 한 커퍼런스에서 <strong>“소프트웨어 공학(Software Engineering)”</strong>이라는 용어가 처음 제안되었다. <br />
컨퍼런스가 진행될 때 의장이었던 <a href="https://en.wikipedia.org/wiki/Friedrich_L._Bauer" target="_blank" class="link-no-underline">프리드리히 바우어(Bauer)</a>는 소프트웨어 공학을 다음과 같이 정의했다.</p>

<blockquote>
  <p>기계에서 효율적으로 작동되는 신뢰성 있는 소프트웨어를 경계적으로 획득하기 위해 적절한 공학적 원리를 수립하여 활용하는 것이다<br />
“Establishment and use of sound engineering principles to economically obtain software that is reliable and works on real machines efficiently.”</p>
</blockquote>

<p>소프트웨어 공학 IEEE(Institute of Electrical and Electronics Engineers)는 다르게 정의했다.</p>

<blockquote>
  <p>소프트웨어의 개발과 운용, 유지보수에 대한 체계적(systematic)이며, 훈련된(disciplined) 계량화할 수 있는(quantifiable) 접근방식의 적용이다<br />
“the application of a systematic, disciplined, quantifiable approach to the development operation, and maintenance of software”</p>
</blockquote>

<p>간단히 정리하면,</p>
<ul>
  <li>소프트웨어 공학은 소프트웨어 위기 때 많은 프로젝트 실패 속에서 해결 방안으로 탄생</li>
  <li>소프트웨어 공학이란,
    <ul>
      <li>효율적이고 신뢰성 있는 소프트웨어를</li>
      <li>경제적(비용과 시간을 고려)이게 개발하기 위하여</li>
      <li>체계적이며 계량화할 수 있는 공학적 원리를 이용해 개발하는 방법</li>
    </ul>
  </li>
</ul>

<p>정도로 이해하면 될 것 같다.</p>

<h2 id="03-소프트웨어-정의와-구성요소">03. 소프트웨어 정의와 구성요소</h2>
<p>위에서 소프트웨어 공학이 어떻게 탄생했고, 그것이 무엇인지 정의를 통해 알아봤다. 그렇다면 소프트웨어는 무엇일까? 무엇을 소프트웨어라 말할 수 있는걸까? 이는 단순히 프로그램을 일컫는 말일까? <br />
답은 아니다. 이를 이해하기 위해 두 개의 정의를 살펴볼 필요가 있다.</p>

<blockquote>
  <p>소프트웨어는 단순한 프로그램 뿐만 아니라 프로그램이 올바르게 작동하도록 하는데 필요한 관련된 문서 및 설치 데이터를 의미한다.
by. 솜머빌(Sommerville)</p>
</blockquote>

<blockquote>
  <p>소프트웨어는 1) 실행되면서 원하는 기능이나 함수, 성능을 제공해 주는 명령어(컴퓨터 프로그램); 2) 프로그램이 데이터를 적절하게 처리할 수 있게 해 주는 자료구조; 3) 프로그램의 사용이나 운영을 나타내는 하드카피나 가상 형태인 문서이다. by. 프레스만(Presman)</p>
</blockquote>

<p>솜머빌은 소프트웨어를 프로그램 뿐 아니라 관련된 문서와 데이터까지 포함하여 정의했고, 프레스만은 프로그램, 문서, 그리고 자료구조까지 포함해 정의했다.</p>

<p>즉, 소프트웨어는 프로그램 뿐만 아니라 문서와 데이터, 때로는 자료구조까지 포함한 것을 일컫는다.</p>

<h2 id="04-소프트웨어-특징-4가지">04. 소프트웨어 특징 4가지</h2>
<p>많은 프로젝트가 실패하면서 소프트웨어 공학이 탄생했는데, 소프트웨어가 어떤 특징을 갖고 있길래 많은 프로젝트들을 실패했을까?
소프트웨어의 특징은 4가지이다.</p>
<ol>
  <li>비가시성</li>
  <li>변경성</li>
  <li>복제성</li>
  <li>복잡성</li>
</ol>

<h3 id="비가시성">비가시성</h3>
<p>비가시성이란 “가시성이 없음, 보이지 않는다”는 뜻이다. 개발 초기에는 소프트웨어 완성 모습을 알 수 없고, 개발 과정 중에도 변경이 일어나 모습을 명확히 그리기가 어렵다. 개발이 완료되더라도 화면만 볼 수 있을 뿐 소프트웨어 그 전체를 알 수 없고, 이러한 비가시성으로 인해 프로젝트는 관리가 어렵고 결과를 예측하기도 쉽지 않다는 특징이 있다.</p>

<h3 id="변경성">변경성</h3>
<p>프로젝트가 최종적으로 완성되기 전까지 소프트웨어는 계속 변경될 가능성이 있고, 완성된 후에도 유지보수를 통해 지속적으로 변경된다. 그러므로 소프트웨어는 쉽게 변경이 가능하다는 특성을 가지고 있다.</p>

<h3 id="복제성">복제성</h3>
<p>소프트웨어는 무한 복제가 가능하다. 복제를 아무리 많이 한다고 해도 닳아 없어지지 않는다. 하지만</p>

<h3 id="복잡성">복잡성</h3>

<h2 id="05-라이프-사이클life-cycle">05. 라이프 사이클(Life Cycle)</h2>
<h2 id="06-소프트웨어-도입-프로젝트-방식">06. 소프트웨어 도입 프로젝트 방식</h2>

<h2 id="정리">정리</h2>
<ul>
  <li>소프트웨어 위기</li>
  <li>소프트웨어 공학 탄생과 정의</li>
  <li>소프트웨어 개념 및 구성요소</li>
  <li>소프트웨어 특징 4가지</li>
</ul>

<h2 id="추가-보완-사항">추가 보완 사항</h2>
<ul>
  <li>소프트웨어 위기의 자세한 내용과 1960년대 컴퓨터 수요 증가 원인을 보충하고 싶음</li>
  <li>공학적 패러다임 / 공학 개념 도입의 의미를 더 파악하길 바람</li>
</ul>

<h2 id="참고문헌">참고문헌</h2>
<ul>
  <li><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788984687448" target="_blank">김희영, “실무에 바로 활용하는 소프트웨어 공학”(21세기사, 2018), pp.2 ~17</a></li>
  <li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1045594" target="_blank">“소프트웨어 공학” KOCW 강의 영상, 조영석, 2014, http://www.kocw.net/home/search/kemView.do?kemId=1045594</a></li>
  <li><a href="https://ko.dict.naver.com/#/userEntry/koko/b40e01e7f02d67730b78b04a8acc2cbd" target="_blank">네이버 사전, “비가시성”, https://ko.dict.naver.com/#/userEntry/koko/b40e01e7f02d67730b78b04a8acc2cbd</a></li>
</ul>
:ET